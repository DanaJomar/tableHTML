% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tableHTML.R
\name{tableHTML}
\alias{tableHTML}
\title{Create an easily css-ible HTML table}
\usage{
tableHTML(obj, rownames = TRUE, class = paste0("table_",
  deparse(substitute(obj))), second_header = NULL)
}
\arguments{
\item{obj}{Needs to be a data.frame or a matrix or an arbitrary object that has the 
data.frame class and can be coersible to a data.frame (e.g data.table, tbl, etc.)}

\item{rownames}{Can be TRUE or FALSE. Defaults to TRUE. Whether the obj's rownames
will be inlcuded.}

\item{class}{Character String. Specifies the table's class. Convinient if you have multiple
tables. Default is table_<data_frame_name>.}

\item{second_header}{A list of two elements of the same length. The first element will contain
the column spans (i.e. a numeric atomic vector) whereas the second element will contain the
names (i.e. a character atomic vector). See the examples for more info. Defauls to NULL.}
}
\value{
An tableHTML object. Printing the table will result in rendering it in R studio's viewer
        with the print.tableHTML method. Use \code{str(tableHTML)} to view the actual html code.
}
\description{
The purpose of \code{tableHTML} is to create easily css-ible HTML tables
that are compatible with R shiny. The exported HTML table will contain separate ids
or classes for headers, columns, second headers (if any) and the table itself 
(in case you have multiple tables) in order to create a 
complex css file very easily. ids and classes are explained in detail in 
the details section.
}
\details{
\code{tableHTML} will create an HTML table with defined ids and classes for rows and columns.
In particular:
\itemize{
  \item \strong{Table:} Will get the class from the class argument in the function. 
      The final class will be of the form table_<class_name>.
  \item \strong{Columns:} Will get an id which will be the same as the column name
  \item \strong{Headers:} Will get an id of the form header_<header index>. 
      For example the first header will have the id header_1, the second header 
      will have header_2 and so on.
  \item \strong{Second_Header:} Will get an id of the form overheader_<second header index>.  
      For example the first second_header will have the id overheader_1, the second header  
      will have overheader_2 and so on.
}

Notice that rows do not get a specific id or class as they are easily accessible from css 
anyway.
}
\examples{
tableHTML(mtcars)
tableHtML(mtcars, rownames = FALSE)
tableHTML(mtcars, class = 'table1')
tableHTML(mtcars, second_header = list(c(3, 4, 5), c('col1', 'col2', 'col3')))

}

